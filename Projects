#-------------------------Step 01----------------------------------------

import pandas as pd

# Load the dataset
data = pd.read_csv('Mall_Customers.csv')
# Display the first few rows
data.head()


#-------------------------Step 02----------------------------------------------

# Check for missing values
print(data.isnull().sum())

# Basic statistical summary
print(data.describe())

# Convert categorical variables if necessary
data['Genre'] = data['Genre'].map({'Male': 1, 'Female': 0})

#--------------------------------Step 03------------------------------------------------

# Example: Create a new feature 'Spending Score per Age'
data['Spending_Score_per_Age'] = data['Spending Score (1-100)'] / data['Age']


#-------------------------------------Step 04---------------------------------------------

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Selecting the features for clustering
features = data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Finding the optimal number of clusters using the elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(features)
    wcss.append(kmeans.inertia_)

# Plotting the results
plt.figure(figsize=(10, 5))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Applying K-means with the optimal number of clusters
optimal_clusters = 5  # Assume 5 for this example; adjust based on the elbow plot
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', max_iter=300, n_init=10, random_state=0)
data['Cluster'] = kmeans.fit_predict(features)

#-------------------------------------------------Step 05---------------------------------------------------

# Visualizing the clusters
sns.pairplot(data, vars=['Age', 'Annual Income (k$)', 'Spending Score (1-100)'], hue='Cluster', palette='bright')
plt.show()

# Summarize each cluster
cluster_summary = data.groupby('Cluster').mean()
print(cluster_summary)
